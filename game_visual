import pygame, math, random

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 1200, 1200
FPS = 60
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
BROWN = pygame.Color("#C19A6B")
HEX_SIZE = 100
TILE_SPAWN = (5*WIDTH//6, 5*HEIGHT//6)

pygame.font.init()
info_font = pygame.font.SysFont("verdana", 15)
hex_font = pygame.font.SysFont("verdana", 10)

# Create the game window
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Great Filter")

# Clock to control frame rate
clock = pygame.time.Clock()


#Visual Elements

class HexTile: 
    def __init__(self, composition, value):
        self.x, self.y = TILE_SPAWN
        composition_list = ['llllll', 'llllww', 'llwwww', 'llwwww']
        self.colors = {'l':GREEN, 'w':BLUE}
        self.composition = composition_list[composition]
        self.rotation = random.randint(0, 2)
        self.value = value
        self.place()

    def set_location(self, x, y): 
        self.x = x
        self.y = y

    def place(self): 
        #draw hexagon
        self.tile = pygame.draw.polygon(screen, BLACK, [(self.x + HEX_SIZE * math.cos(math.radians(angle)), self.y + HEX_SIZE * math.sin(math.radians(angle))) for angle in range(0, 360, 60)], 10)
        for angle in range(0, 360, 60):
            index = (angle//60 + 2 * self.rotation) % 6
            #draw hex triangle fill
            pygame.draw.polygon(screen, self.colors[self.composition[index]], 
                                [(self.x, self.y), 
                                 (self.x + (HEX_SIZE - 4) * math.cos(math.radians(angle)), self.y + (HEX_SIZE - 4) * math.sin(math.radians(angle))), 
                                 (self.x + (HEX_SIZE - 4) * math.cos(math.radians(angle+60)), self.y + (HEX_SIZE - 4) * math.sin(math.radians(angle+60)))]
            )
            #draw hex triangle line
            pygame.draw.polygon(screen, BLACK, 
                                [(self.x, self.y), 
                                 (self.x + (HEX_SIZE) * math.cos(math.radians(angle)), self.y + (HEX_SIZE) * math.sin(math.radians(angle))), 
                                 (self.x + (HEX_SIZE) * math.cos(math.radians(angle+60)), self.y + (HEX_SIZE) * math.sin(math.radians(angle+60)))
                                ], width=3
            )


class HexGrid: 
    def __init__(self):
        self.grid = [[None for _ in range(5)] for _ in range(4)]

    def draw_hexagon(self, surface, color, position, size):
        x, y = position
        points = [(x + size * math.cos(math.radians(angle)), y + size * math.sin(math.radians(angle))) for angle in range(0, 360, 60)]
        pygame.draw.polygon(surface, color, points, 2)

    def draw_hex_grid(self, rows, cols, hex_size, tiles):
        grid_width = (cols - 1) * (1.5 * hex_size) + hex_size
        grid_height = (rows - 1) * (hex_size * math.sqrt(3)) + hex_size * math.sqrt(3)
        offset_x = (WIDTH - grid_width) / 2 + 50
        offset_y = (HEIGHT - grid_height) / 3
        index = 0
        for row in range(rows):
            for col in range(cols):
                tile: HexTile = tiles[index]
                x = col * hex_size * 1.5 + offset_x
                y = row * hex_size * math.sqrt(3) + (hex_size * math.sqrt(3) / 2 * (col % 2)) + offset_y
                tile.set_location(x, y)
                tile.place()
                pygame.draw.circle(screen, BLACK, (x, y), 10)
                hex_num = hex_font.render(str(tile.value), True, WHITE)
                screen.blit(hex_num, (x - hex_num.width/2, y- hex_num.height/2))
                self.grid[row][col] = tile
                index += 1

    
class InfoBar: 
    def __init__(self, players: list):
        self.players = players
    
    def draw_sections(self): 
        offset = (10, 5)
        main_box = [(WIDTH/10, 5*HEIGHT/6), (8*WIDTH/10, 0.7*HEIGHT/6)]
        pygame.draw.rect(screen, WHITE, main_box)
        pygame.draw.rect(screen, BLACK, main_box, width=4)
        for n in range(4): 
            pygame.draw.rect(screen, BLACK, [(main_box[0][0]+(n)*WIDTH/5, main_box[0][1]), (main_box[1][0]/4, main_box[1][1])], width=1)
            player: Player = self.players[n]
            screen.blit(player.name, (WIDTH/10+(n)*WIDTH/5 + offset[0], 5*HEIGHT/6 + offset[1]))



#Technical Elements

class GameManager: 
    def __init__(self):
        self.players = [None, None, None, None]
        self.assign_players()

    def assign_players(self): 
        for n in range(4): 
            self.players[n] = Player(f"Player {n+1}", n)


class Player: 
    def __init__(self, name, position): 
        self.name = info_font.render(name, True, BLACK)
        self.position = position

    
    
        

#Miscellaneous Methods
def shuffle(input_list: list): 
    for n in range(1000): 
        a = random.randint(0, len(input_list)-1)
        input_list.append(input_list.pop(a))
    return input_list




# Game loop
def main():
    tile_dragging = False   
    #initial conditions
    game_space = HexGrid()
    manager = GameManager()
    info_space = InfoBar(manager.players)
    tiles = shuffle([HexTile(n%4, n+1) for n in range(20)])

    running = True
    while running:
        clock.tick(FPS)  # Limit the frame rate
        
        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            
            #Code for drag and dropping tiles, moot due to auto-assigment, may be revisited in the future. 


            # elif event.type == pygame.MOUSEBUTTONDOWN:
            #     if event.button == 1:            
            #         if tile.tile.collidepoint(event.pos):
            #             tile_dragging = True
            #             mouse_x, mouse_y = event.pos
            #             offset_x = tile.x - mouse_x
            #             offset_y = tile.y - mouse_y
            #             print('click')

            # elif event.type == pygame.MOUSEBUTTONUP:
            #     if event.button == 1:            
            #         tile_dragging = False

            # elif event.type == pygame.MOUSEMOTION:
            #     if tile_dragging:
            #         mouse_x, mouse_y = event.pos
            #         tile.x = mouse_x + offset_x
            #         tile.y = mouse_y + offset_y


        # Game logic goes here
        
        # Drawing
        screen.fill(BROWN)  # Clear the screen with white
        game_space.draw_hex_grid(4, 5, HEX_SIZE, tiles)
        info_space.draw_sections()

        
        # Update display
        pygame.display.flip()



    # Quit Pygame
    pygame.quit()

if __name__ == "__main__": 
    main()
